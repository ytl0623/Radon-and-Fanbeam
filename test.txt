clear all; close all; clc
imdata = imread('YOUR IMAGE');
figure(1);imshow(imdata); title('Original Image');
imdata = rgb2gray(imdata);
figure(2); imshow(imdata); title('Gray Image');
%Get Fourier Transform of an image
F = fft2(imdata);
% Fourier transform of an image
S = abs(F);
figure(3);imshow(S,[]);title('Fourier transform of an image');
%get the centered spectrum
Fsh = fftshift(F);
figure(4);imshow(abs(Fsh),[]);title('Centered fourier transform of Image')
%apply log transform
S2 = log(1+abs(Fsh));
figure(5);imshow(S2,[]);title('log transformed Image')
%reconstruct the Image
F = ifftshift(Fsh);
f = ifft2(F);
figure(6);imshow(f,[]),title('reconstructed Image')
================================
clear all ; close all ; clc
path = "C:\Users\User\Downloads\CT.jpg" ;
imdata = imread( path ) ;
% Get Fourier transform of image
F = fft2( imdata ) ;
% Fourier transform of image
S = abs( F ) ;
figure( 1 ) ; imshow( S, [] ) ;
title( 'Fourier transform of image' ) ;
% Get the centered spectrum
Fsh = fftshift( F ) ;
figure( 2 ) ; imshow( abs( Fsh ), [] ) ;
title( 'Centered Fourier transform of image' ) ;
% Apply log transform
S2 = log( 1 + abs( Fsh ) ) ;
figure( 3 ) ; imshow( S2, [] ) ;
title( 'Log transform of image' ) ;
% Reconstruct the image
F = ifftshift( Fsh ) ;
f = ifft2( F ) ;
figure( 4 ) ; imshow( f, [] ) ;
title( 'Reconstruct of image' ) ;

================================
clear all ; close all ; clc ;
path = "C:\Users\User\Downloads\CT.jpg" ;
P = imread( path ) ;
% Get Fourier transform
F = fft2( P ) ;
% Get the centered spectrum
F = fftshift( F ) ;
% Get the magnitude
F = abs( F ) ;
% Apply log transform
F = log( F + 1 ) ;
% Use mat2gray to scale the image between 0 and 1
F = mat2gray( F ) ;
imshow( F, [] ) ;
% Reconstruct the image
F = ifftshift( F ) ;
F = ifft2( F ) ;
imshow( F, [] ) ;
================================
Assuming that I is your input image and F is its Fourier Transform (i.e. F = fft2(I))

P = phantom('Modified Shepp-Logan',200);

F = fft2(P);

F = fftshift(F); % Center FFT

F = abs(F); % Get the magnitude
F = log(F+1); % Use log, for perceptual scaling, and +1 since log(0) is undefined
F = mat2gray(F); % Use mat2gray to scale the image between 0 and 1

imshow(F,[]); % Display the result

===================================


%Create a black 30x30 image
f=zeros(30,30);
%With a white rectangle in it.
f(5:24,13:17)=1;
imshow(f,'InitialMagnification', 'fit')

=====================================
clear all; close all; clc
% Radon transform

% Make the axes scale visible for this image
iptsetpref('ImshowAxesVisible','on')

%Create a black 30x30 image
I=zeros(30,30);
%With a white rectangle in it.
I(5:24,13:17)=1;
imshow(I,'InitialMagnification', 'fit')

% Calculate the Radon transform
theta = 0:180;
[R,xp] = radon(I,theta);

% Display the transform
imshow(R,[],'Xdata',theta,'Ydata',xp,'InitialMagnification','fit')
xlabel('\theta (degrees)')
ylabel('x''')
colormap(gca,hot), colorbar

% Make the axes scale invisible
iptsetpref('ImshowAxesVisible','off')

================================
clear all; close all; clc
% Inverse Radon transform

% Create an image of the phantom. Display the image
P = phantom(128); 
imshow(P)
title('Original image')

% Perform a Radon transform of the image
R = radon(P,0:179);

% Perform filtered backprojection
I1 = iradon(R,0:179);

% Perform unfiltered backprojection
I2 = iradon(R,0:179,'linear','none');

% Display the reconstructed images
figure
subplot(1,2,1)
imshow(I1,[])
title('Filtered Backprojection')
subplot(1,2,2)
imshow(I2,[])
title('Unfiltered Backprojection')

===================================
clear all; close all; clc
% Fan-beam transform

% Set the IPT preference to make the axes visible
iptsetpref('ImshowAxesVisible','on')

% Create a sample image and display it
ph = phantom(128);
imshow(ph)

% Calculate the fanbeam projections and display them
[F,Fpos,Fangles] = fanbeam(ph,250);
figure
imshow(F,[],'XData',Fangles,'YData',Fpos,...
            'InitialMagnification','fit')
axis normal
xlabel('Rotation Angles (degrees)')
ylabel('Sensor Positions (degrees)')
colormap(gca,hot), colorbar

===================================
clear all; close all; clc
% Inverse fan-beam transform

% Recreate Image from Fan-beam Transformation

% Create a sample image. The phantom function creates a phantom head image
ph = phantom(128);

% Create a fan-beam transformation of the phantom head image
d = 100;
F = fanbeam(ph,d);

% Reconstitute the phantom head image from the fan-beam representation. Display the original image and the reconstituted image
I = ifanbeam(F,d);
imshow(ph)

figure
imshow(I);



























